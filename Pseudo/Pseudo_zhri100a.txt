!*****************************************************************************
!*  Program Name:  V:\Development\HR\SQR\ZHRI100A.SQR
!*****************************************************************************
!*  Project Id:          ZHR_M0D_INTERFACE
!*****************************************************************************
!*  Program Summary:  Interfaces the PeopleSoft data to the Legacy data
****************************************************************************

PROCEDURES DEFINED IN THIS FILE:
PROCEDURE              				DESCRIPTION                            
-----------        					-----------                         
Get-Variable                        //gets record from PS_ZPTT_VARIABLES
FTP-File                            //not used
Check-Interface-Runfile             //checks the existance a run file
Get-Trigger-Data                    //gets records from PS_ZHRT_INTTRIGGER
Call-Programs                       //selects which procedure to call based on PROC_NAME
Update-Trigger-Row	                //updates TASK_FLAG in PS_ZHRT_ALTTRIGGER
Get-Trigger-Data-NonEmp             //gets record from PS_ZHRT_ALTTRIGGER
Call-Programs-NonEmp                //selects which procedure to call based for PROC_NAME
Update-Trigger-Row_NonEmp           //updates TASK_FLAG in PS_ZHRT_ALTTRIGGER
Call-System	                        //executes a command line statement
Prepare-Error-Parms                 //formats parameters for the Call-Error-Routine procedure
Call-Error-Routine                  //builds the command and calls the HRZ110A error procedure
Call-Error-Routine-NonEmp           //builds the command and calls the HRZ210A error procedure
Check-If-Contractor                 //gets record from PS_JOB
Check-If-Correct102A                //checks to see IF 102A procedure has PS_JOB value
Build-Group-WHERE-Clause            //unused in this file; builds the WHERE clause that will select the correct Group
Build-Emplid-WHERE-Clause           //unused in this file; builds a WHERE clause based on an employee id
Get-OprId                           //calls Get-LegId-For-Seq0 or Get-LegId-For-SeqNum or Get-Legacy-OprId procedure
Get-LegId-For-Seq0                  //gets ZHRF_LEG_EMPL_ID from PS_ZHRT_EMPID_CREF for EMPLID
Get-LegId-For-SeqNum                //gets ZHRF_LEG_EMPL_ID from PS_ZHRR_MULTPL_EID for EMPLID and SEQUENCE
Get-Legacy-OprId                    //formulates legacy OprId from HR036P WHERE HR036P.H36EM# = #wrk_emplid and HR036P.H36INX = #indexNum UNION
Insert-OprId                        //inserts a record into PS_ZHRT_EMPID_CREF (EMPLID, ZHRF_LEG_EMPL_ID) VALUES ($Wrk_EmplId, $LegEmplId)
Update-OprId                        //updates a record in PS_ZHRR_MULTPL_EID
Insert-Error                        //sets error message and error flag value for an error on insert and calls Call-Error-Routine procedure
Update-Error                        //sets error message and error flag value for an error on update and calls Call-Error-Routine procedure
Format-Employee-Name                //converts from legacy format (Last*First MI*) (legacy system) to PeopleSoft format (Last, First MI)
Check-EffDt-Transaction             //checks EMPLID value in PS_JOB and PS_PERS_DATA_EFFDT tables
Build-Active-Dir-Output-File        //marshals data and calls Write-Active-Dir-Output-File procedure //not used???
AD-Get-Job-Data                     //gets PS_JOB record for EMPLID
AD-Get-Job-Description              //gets JOBCODE from PS_JOBCODE_TBL
AD-Get-EmplStatus-Description       //gets XLATLONGNAME from PSXLATITEM
AD-Get-JobStart-Date                //gets EFFDT from PS_JOB and parses value into year, month, and day values
AD-Get-Pers-Data-EffDt              //gets FIRST_NAME, LAST_NAME, MIDDLE_NAME from PS_NAMES
AD-Get-NameSuffix                   //gets NAME_SUFFIX from PS_NAMES
AD-Get-Personal-Data                //gets LANG_CD from PS_PERSONAL_DATA
AD-Get-Country-Code                 //gets COUNTRY from PS_LOCATION_TBL for LOCATION
AD-Get-Business-Phone               //gets PHONE from PS_PERSONAL_PHONE
AD-Get-Employee-Fax                 //gets PHONE from PS_PERSONAL_PHONE WHERE PHONE_TYPE = 'FAX'
AD-Get-LegSuperviorID               //gets ZHRF_LEG_EMPL_ID from PS_ZHRT_EMPID_CREF
AD-Get-Employment-Data              //gets SUPERVISOR_ID, ADEHIRE_DT, ADEREHIRE_DT, ADETERMINATION_DT from PS_EMPLOYMENT and parses dates to year, month, day
AD-Get-Names                        //gets FIRST_NAME from PS_NAMES WHERE NAME_TYPE = 'PRF'
Write-Active-Dir-Output-File        //does what it says
Intialize-AD-WrkFields              //initialized fields to default values
Process-Main                        //the process control procedure!!

*****************************************************************************
!*  TABLES USED:
!*  TABLE                   DESCRIPTION                            ACCESS
!*  -----                   -----------                            ------
!*  JOB                     PeopleSoft Employee Job Table          Select
!*  ZHRT_INTTRIGGER         PeopleSoft to Legacy Interface Table   Update
!*  PS_ZHRT_EMPID_CREF      PeopleSoft Employee Cross Refer Table  Select/Insert
!*  HR006P                  Employee Master file (Legacy System)   Select
!*  PSXLATITEM              Translate Table                        Select
!*
!*  Input/Output Files:
!*  FILE NAME         INPUT/OUTPUT        DESCRIPTION
!*  ---------         ------------        -----------
!*
!*****************************************************************************

*****************************************************************************
VARIABLES USED:
PROCESS-MAIN
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#run_flag                               1
$AD_HOME                    WRITE       $PS_HOME || '/data/activedir/'    !Path for Active Directory
$Command                    WRITE       'sleep 15'  !After interface run wait 15 seconds and DO it again  !sree**rehost        !ZHR_MOD_ZHRI100A_sleep
$Command_Non                WRITE       'sleep 15'  !after the main trigger table wait for 15 secs
$Library                                //library name on AS/400 WHERE programs reside
$ORACLE_SID                 WRITE       getenv('ORACLE_SID')
$PS_HOME                    WRITE       getenv('PS_HOME')
$RMTNTADSVR
$RMTSVR                                 //name of AS/400 machine for use in zbas002b.sh
$RexecScript                WRITE       '/usr/local/barch/' || $ORACLE_SID || '/scripts/zbas002b.sh'
$WrkCriticalFlag                        'N'
$file_open                              'N'                       !ZHR_MOD_ZHRI100A_sleep

FTP-FILE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#status                                 != 0            !error
$ErrorMessageParm           WRITE       'Error occurred in shell script, contact HR PeopleSoft Oncall'
$ErrorProgramParm           WRITE       'HRZ105A'
$WrkCriticalFlag                        'Y'

CHECK-INTERFACE-RUNFILE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$ORACLE_SID
#file_exists                WRITE       exists($RUN_FILEPATH)
#run_flag                   WRITE       IF #file_exists = 0 #run_flag = 1; ELSE #run_flag = 0
$RUN_FILEPATH               WRITE       '/usr/local/barch/' || $ORACLE_SID || '/work/hrinterface.run'

GET-TRIGGER-DATA
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#PSEffSeq                   WRITE       &PS_ZHRT_INTTRIGGER.EFFSEQ
#WrkSequence                WRITE       PS_ZHRT_INTTRIGGER.SEQ_NBR
#Wrk_EmplID1                WRITE       $PSEmplId
$AuditOprId                 WRITE       LTRIM(RTRIM(&PS_ZHRT_INTTRIGGER.OprId,' '),' ')
$CompletionStatus           WRITE       'P' !Initialize the CompletionStatus field
$Found                                  'N'     !Not a contractor
$OK-To-Process
$PSEffDt                    WRITE       TO_CHAR(PS_ZHRT_INTTRIGGER.EFFDT, 'YYYY-MM-DD')
$PSEmplId                   WRITE       LTRIM(RTRIM(&PS_ZHRT_INTTRIGGER.EMPLID,' '),' ')
$PoiFlag                    'N'
$WrkProcess                 WRITE       LTRIM(RTRIM(&PS_ZHRT_INTTRIGGER.PROC_NAME,' '),' ')   !Remove leading and trailing blanks
$Wrk_EmplId2                WRITE       EDIT(#Wrk_EmplID1,'099999999')

CALL-PROGRAMS
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#PSEffseq                   READ
#Wrk_Sequence               READ
$ADAction_Code                          'T', 'C', 'R', '', 'H'
$AuditOprId                 READ
$PSEffDt                    READ
$PSEmplId                   READ
$WrkProcess                 READ
#WrkSeqNbr                  WRITE       #Wrk_Sequence
#Wrk_Effseq                 WRITE       #PSEffseq
$ADLegOprId                 WRITE       ''
$CompletionStatus           WRITE       'C'
$ErrorMessageParm           WRITE       'A row was deleted on the hire process'
$ErrorProgramParm           WRITE       'HRZ101A'
$PSAuditOperId              WRITE       $AuditOprId
$PSDateIn                   WRITE       $PSEffDt
$PSUserOprid                WRITE       $AuditOprId
$PSemp                      WRITE       $AuditOprId
$WrkCriticalFlag            WRITE       'Y'
$Wrk_ADCountryCdBuild       WRITE       'Y'
$Wrk_Effdt                  WRITE       $PSEffDt
$Wrk_EmplId                 WRITE       $PSEmplId
$Wrk_Inf_                   WRITE       ' '
$Wrk_Oprid                  WRITE       $AuditOprId
$Wrk_Process_Name           WRITE       $WrkProcess

UPDATE-TRIGGER-ROW
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#WRKSEQUENCE                WRITE       PS_ZHRT_INTTRIGGER.SEQ_NBR = #WRKSEQUENCE
$CompletionStatus           WRITE       'P'

GET-TRIGGER-DATA-NONEMP
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
&RZ                         READ
$AsOfToday
$NCompletionStatus                      'P', 'E'
$PoiFlag                                'Y'
#NPSEffSeq                  WRITE       &PS_ZHRT_ALTTRIGGER.EFFSEQ
#NWrkSequence               WRITE       &PS_ZHRT_ALTTRIGGER.SEQ_NBR
#NWrk_EmplID1               WRITE       $NPSEmplid
#indexNum                   WRITE       &PS_ZHRT_ALTTRIGGER.SEQUENCE
$AuditOprId                 WRITE       LTRIM(RTRIM(&RZ.OPRID,' '),' ')
$NAuditOprid                WRITE       LTRIM(RTRIM(&PS_ZHRT_ALTTRIGGER.OPRID,' '),' ')
$NPSEffdt                   WRITE       TO_CHAR(PS_ZHRT_ALTTRIGGER.EFFDT, 'YYYY-MM-DD')
$NPSEmplid                  WRITE       LTRIM(RTRIM(&PS_ZHRT_ALTTRIGGER.EMPLID,' '),' ')
$NWrkProcess                WRITE       LTRIM(RTRIM(&PS_ZHRT_ALTTRIGGER.PROC_NAME,' '),' ')           !Remove leading and trailing blanks
$NWrk_EmplId2               WRITE       EDIT(#NWrk_EmplID1,'099999999')

CALL-PROGRAMS-NONEMP
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#NPSEffseq                  READ
#indexNum                   READ
$NAuditOprid                READ
$NAuditOprid                READ
$NAuditOprid                READ
$NPSEffdt                   READ
$NPSEffdt                   READ
$NPSEffdt                   READ
$NPSEmplid                  READ
$NWrkProcess                READ
$NWrkProcess                READ
#Wrk_Effseq                 WRITE       #NPSEffseq
$CompletionStatus           WRITE       'E'     !update to an E to prevent looping and to mark the record in error

UPDATE-TRIGGER-ROW_NONEMP
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#NWrkSequence
$NCompletionStatus

CALL-SYSTEM
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#Status                                 != 0
$RMTSVR
$RexecScript
$SysDateTime
#CommandLength              WRITE       LENGTH($Command)             !Get the length of the command
#SubstrStartPos             WRITE       #SubstrStartPos + 100    !Increase the starting position by 100
$Command                    WRITE       $RexecScript || ' ' || $Command || ' ' || $RMTSVR
$ErrorMessageParm           WRITE       'Error executing Call System command, contact HR-PeopleSoft Oncall'
$ErrorProgramParm           WRITE       'ZHRI100A'
$PoiFlag                    WRITE       'N'
$ShowCommand                WRITE       SUBSTR($Command,#SubstrStartPos,100)   !Substring 100 positions to show
$WrkCriticalFlag            WRITE       'Y'

PREPARE-ERROR-PARMS
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$AsOfToday                  READ
$AuditOprId                 READ
$Out                        READ
$AddDateErrorParm           WRITE       DATETOSTR(STRTODATE($AsOfToday,'DD-MON-YYYY'),'YYYYMMDD')
$AddTimeErrorParm           WRITE       SUBSTR($Out,10,2)    ||    SUBSTR($Out,13,2)    ||    SUBSTR($Out,16,2)
$OprIdErrorParm             WRITE       SUBSTR($AuditOprId,2,5)

CALL-ERROR-ROUTINE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$AddDateErrorParm
$AddTimeErrorParm
$Command                    WRITE       '"CALL '       ||
$ErrorMessageParm           WRITE       SUBSTR($ErrorMessageParm,1,75)  !Make sure not more than 75 long
$ErrorProgramParm
$Library
$OprIdErrorParm
$WrkCriticalFlag
$Wrk_EmplId2

CALL-ERROR-ROUTINE-NONEMP
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$AddDateErrorParm
$AddTimeErrorParm
$Command                    WRITE       '"CALL '       ||
$ErrorMessageParm           WRITE       SUBSTR($ErrorMessageParm,1,75)  !Make sure not more than 75 long
$ErrorProgramParm
$Library
$NWrk_EmplId2
$OprIdErrorParm
$WrkCriticalFlag
$Wrk_indexNum

CHECK-IF-CONTRACTOR
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$AsOfToday
$PSEmplId
$Found                      WRITE       'N'
'X'                         WRITE

CHECK-IF-CORRECT102A
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEffDt
$PSEmplId
$dt102
$OK-To-Process              WRITE       'N'
$WrkProcess                 WRITE       'ZHRI102A'
'XX'                        WRITE

BUILD-GROUP-WHERE-CLAUSE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Alias
$SelectGroup
$WhereClause                WRITE       LTRIM(RTRIM($WhereClause,' '),' ')  !Remove leading and trailing blanks

BUILD-EMPLID-WHERE-CLAUSE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Alias
$Run-Id
$WhereClause                WRITE

GET-OPRID
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
#indexNum
$PoiFlag
$LegEmplId
$Found                      WRITE       'N'
$PSOprId                    WRITE       ''

GET-LEGID-FOR-SEQ0
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrk_EmplId         
$PSOprId                    WRITE       &PS_ZHRT_EMPID_CREF.ZHRF_LEG_EMPL_ID
$Found                      WRITE       'Y'

GET-LEGID-FOR-SEQNUM
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrk_EmplId  
#indexNum
$PSOprId                    WRITE       LTRIM(RTRIM(&PS_ZHRR_MULTPL_EID.ZHRF_LEG_EMPL_ID,' '),' ')
$Found                      WRITE       'Y'

INSERT-OPRID
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrk_EmplId
$LegEmplId
$Insert-Error-Flag          WRITE       'N'

Update-OprId
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Update-Error-Flag          WRITE       'N'
$LegEmplId
$Wrk_EmplId
#indexNum

INSERT-ERROR
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Sql-Error                  READ
$ErrorMessageParm           WRITE       $Sql-Error
$Insert-Error-Flag          WRITE       'Y'

UPDATE-ERROR
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Sql-Error                  READ
$ErrorMessageParm           WRITE       $Sql-Error
$Update-Error-Flag          WRITE       'Y'

FORMAT-EMPLOYEE-NAME
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$LegEmpName                 READ
$PSEmp_Last_Name_Search     WRITE
$PSEmp_First_Name_Search    WRITE
$dummy                      WRITE       ! dummy is for the ending *
$_work_a                    WRITE
$PSEmpName                  WRITE

Check-EffDt-Transaction
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$WrkProcess
$PSEffDt
$PSEmplId
$WrkADEffDt                 WRITE       ''
$WrkADEffDt                 WRITE       $PSEffDt
$AdFound                    WRITE       'N'


BUILD-ACTIVE-DIR-OUTPUT-FILE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrkcreatefile              WRITE       'Y'
$Wrk_AD_JobDataBuild
$Wrk_AD_PersdataEffdtBuild
$Wrk_AD_Getbusinessphone
$Wrk_AD_PersDataBuild
$Wrk_AD_CountryCdBuild
$ADSupervisorID
$Wrk_AD_NamesBuild
$ADEmplid                   WRITE       $PSEmplId
$ADFirstName                WRITE       $ADPSFirstName || ' ' || $ADPSMiddleName
$ADLastName                 WRITE       $ADPSLastName
$ADLocation                 WRITE       $PSLocation
$ADJobCd                    WRITE       $PSJobCode
$ADJobDescr                 WRITE       $PSJobDescription
$ADEmplStatus               WRITE       $PSEmplStatus
$PSRehireDt
$ADHireDt                   WRITE       $PSRehiredt
$ADHireDt                   WRITE       $PSHiredt
$PSAction
$PSAction_Reason
$WrkProcess
$ADAction_Code              WRITE       'R'
$ADCountry                  WRITE       $PSLoc_Country
$ADFullPartTime             WRITE       $PSFullPartTime
$ADEmplClass                WRITE       $PSEmplClass
$ADDeptID                   WRITE       $PSDeptId
$ADBusinessPhone            WRITE       $PSBusiness_Phone
$ADLangCd                   WRITE       $PSLangCd
$ADPrfName                  WRITE       $PSPrfName

AD-GET-JOB-DATA
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrk_EmplId
$PSEffDt
$PSLocation                 WRITE       ltrim(rtrim(&PS_JOB.LOCATION,' '),' ')
$PSFullPartTime             WRITE       ltrim(rtrim(&PS_JOB.FULL_PART_TIME,' '),' ')
$PSEmplClass                WRITE       ltrim(rtrim(&PS_JOB.EMPL_CLASS,' '),' ')
$PSEmplStatus               WRITE       ltrim(rtrim(&PS_JOB.EMPL_STATUS,' '),' ')
$PSDeptid                   WRITE       ltrim(rtrim(&PS_JOB.DEPTID,' '),' ')
$PSJobCode                  WRITE       ltrim(rtrim(&PS_JOB.JOBCODE,' '),' ')

AD-GET-JOB-DESCRIPTION
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSJobCode
$PSJobDescription           WRITE       ltrim(rtrim(&PS_JOBCODE_TBL.DESCR,' '),' ')

AD-GET-EMPLSTATUS-DESCRIPTION
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$ADEmplStatusDescr          WRITE       ltrim(rtrim(&PSXLATITEM.XLATLONGNAME,' '),' ')
SYSDATE
'EMPL_STATUS'
$PSEmplStatus

AD-GET-JOBSTART-DATE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$Wrk_EmplId
$PSJobCode
$PSEffDt
$ADJobStartYr               WRITE       substr(&PS_JOB.EFFDT,1,4)
$ADJobStartMnth             WRITE       substr(&PS_JOB.EFFDT,6,2)
$ADJobStartDay              WRITE       substr(&PS_JOB.EFFDT,9,2)
$ADJobStartDt               WRITE       $ADJobStartYr || $ADJobStartMnth || $ADJobStartDay
$PSJobStartDt               WRITE       &PS_JOB.EFFDT

AD-Get-Pers-Data-EffDt
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
$PSEffDt
$ADPSLastName               WRITE       RTRIM(LTRIM(&PS_NAMES.Last_Name,' '),' ')
$ADPSFirstName              WRITE       RTRIM(LTRIM(&PS_NAMES.First_Name,' '),' ')
$ADPSMiddleName             WRITE       RTRIM(LTRIM(&PS_NAMES.Middle_Name,' '),' ')
$ADPSMiddleName             WRITE       SUBSTR($ADPSMiddleName,1,1)

AD-GET-NAMESUFFIX
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
$PSEffDt
$ADNameSuffix               WRITE       RTRIM(LTRIM(&PS_NAMES.Name_Suffix,' '),' ')
$ADNameSuffix               WRITE       SUBSTR($ADNameSuffix,1,5)

AD-GET-PERSONAL-DATA
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
$PSLangCd                   WRITE       ''
$PSLangCd                   WRITE       RTRIM(LTRIM(&PS_Personal_Data.LANG_CD,' '),' ')

AD-GET-COUNTRY-CODE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSLOCATION
$PSLoc_Country              WRITE       ltrim(rtrim(&PS_LOCATION_TBL.COUNTRY,' '),' ')         !Remove leading and trailing blanks

AD-GET-BUSINESS-PHONE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
'BUSN'
$PSBusiness_Phone           WRITE       Remove-Non-Letters-Numbers (&PS_Personal_Phone.Phone, $PSBusiness_Phone)   !from ZRmvSpcChr.sqc

AD-GET-EMPLOYEE-FAX
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
'FAX'
$ADEmployeeFax              WRITE       Remove-Non-Letters-Numbers (&PS_Personal_Phone.Phone, $ADEmployeeFax)   !from ZRmvSpcChr.sqc

AD-GET-LEGSUPERVIORID
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$ADSupervisorID
$ADLegSupervisorID          WRITE       &PS_ZHRT_EMPID_CREF.ZHRF_LEG_EMPL_ID

AD-GET-EMPLOYMENT-DATA
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEmplId
&ADEHire_Dt                 TO_CHAR(PS_Employment.HIRE_DT,'YYYY-MM-DD')       
$PSHireYr                   WRITE       SUBSTR(&ADEHire_Dt,1,4)
$PSHireMnth                 WRITE       SUBSTR(&ADEHire_Dt,6,2)
$PSHireDay                  WRITE       SUBSTR(&ADEHire_Dt,9,2)
$PSHiredt                   WRITE       $PSHireYr || $PSHireMnth || $PSHireDay
&ADERehire_Dt               WRITE       TO_CHAR(PS_Employment.REHIRE_DT,'YYYY-MM-DD')
$PSRehireYr                 WRITE       SUBSTR(&ADERehire_Dt,1,4)
$PSRehireMnth               WRITE       SUBSTR(&ADERehire_Dt,6,2)
$PSRehireDay                WRITE       SUBSTR(&ADERehire_Dt,9,2)
$PSRehiredt                 WRITE       $PSRehireYr || $PSRehireMnth || $PSRehireDay
&ADETermination_Dt          WRITE       TO_CHAR(PS_Employment.TERMINATION_DT,'YYYY-MM-DD')
$PSTermYr                   WRITE       SUBSTR(&ADETermination_Dt,1,4)
$PSTermMnth                 WRITE       SUBSTR(&ADETermination_Dt,6,2)
$PSTermDay                  WRITE       SUBSTR(&ADETermination_Dt,9,2)
$PSTerminationdt            WRITE       $PSTermYr || $PSTermMnth || $PSTermDay
$ADSupervisorID             WRITE       &PS_Employment.SUPERVISOR_ID

AD-GET-NAMES
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$PSEffDt
$PSEmplId
'PRF'
$PSPrfName                  WRITE       RTRIM(LTRIM(&PS_Names.First_Name,' '),' ')

WRITE-ACTIVE-DIR-OUTPUT-FILE
------------------------------------------------------------------------
VARIABLE                    READ/WRITE  DESCRIPTION
--------                    ----------  -----------
$ADAction_Code              READ        ! Action Code (H=Hire, C=Change, T=Termination)
$ADLegOprId                 READ        ! Legacy Employee Id
$ADEmplid                   READ        ! Employee Id
$ADFirstName                READ        ! First Name
$ADlastName                 READ        ! Last Name
$ADPrfName                  READ        ! Preferred Name
$ADNamesuffix:              READ        ! Name Suffix Text
$ADLocation                 READ        ! HR Location
$ADDeptID                   READ        ! Department ID
$ADJobCd                    READ        ! Job Title Code
$ADJobDescr                 READ        ! Job Title Description
$ADEmplStatus               READ        ! Work Status
$ADEmplStatusDescr          READ        ! Employee Status Description
$ADHireDt                   READ        ! Hire Date / Rehire Date
$ADTermDt                   READ        ! Termination Date
$ADJobStartDt               READ        ! Current Job Start Date
$ADFullPartTime             READ        ! Full/Part Time Flag (F OR P)
$ADEmplClass                READ        ! Employee Class
$ADBusinessPhone            READ        ! Business Phone Number
$ADEmployeeFax              READ        ! Fax Number
$ADSupervisorID             READ        ! Supervisor ID
$ADLegSupervisorID          READ        ! Leg Supervisor ID
$ADCountry                  READ        ! Country Code
$ADLangCd                   READ        ! Language Preference

*****************************************************************************

#include 'setenv.sqc' !Set environment

begin-program
Do GET-CURRENT-DATETIME  !Gets the current date and time using curdttim.sqc
//getCurrentDateTime()
Do Init-DateTime      !Converts UNIX months to numeric
//initDateTime()
do Process-Main
//processMain()
do Reset          !Reset.sqc
//reset()
end-program

!----------------------------------------------------------------------
! ERAC
! Procedure:  Process-Main
! Desc:  This is the process controling procedure.
!----------------------------------------------------------------------

Begin-Procedure Process-Main

!This gets the oracle_sid
LET $PS_HOME = getenv('PS_HOME')
//psHome = getenv('PS_HOME')
LET $AD_HOME = $PS_HOME || '/data/activedir/'  !Path for Active Directory
//adHome = psHome + "/data/activedir/"
LET $ORACLE_SID = getenv('ORACLE_SID')
//oracleSid = getenv('ORACLE_SID')
UPPERCASE $ORACLE_SID
//oracleSid.toUpperCase()

!Returns name of AS/400 machine for use in zbas002b.sh
LET $Variable_Needed = ' '
LET $Variable_Needed = 'RMTSVR'
Do  Get-Variable
LET $RMTSVR = $PSZPTT_VARIABLE_VAL
//remoteServerName = getVariable("RMTSVR")
LET $RexecScript = '/usr/local/barch/' || $ORACLE_SID || '/scripts/zbas002b.sh'
//rexecScript = "/usr/local/barch/" + oracleSid + "/scripts/zbas002b.sh"

!Returns library name on AS/400 where programs reside
LET $Variable_Needed = ' '
LET $Variable_Needed = 'AS400library'
Do  Get-Variable
LET $Library = $PSZPTT_VARIABLE_VAL
//library = getVariable("AS400library")

!Returns IP address of NT server
LET $Variable_Needed = ' '
LET $Variable_Needed = 'RMTNTADSVR'
Do Get-Variable
LET $RMTNTADSVR = $PSZPTT_VARIABLE_VAL
//remoteNtAdServer = getVariable("RMTNTADSVR")

LET $WrkCriticalFlag = 'N'
//wrkCriticalFlag = false
LET #run_flag = 1
//runFlag = true
while #run_flag = 1        !Never ending loop
//while(runFlag) {
do Check-Interface-Runfile
//checkInterfaceRunFile()
do Get-Trigger-Data       !Process the interface requests
//getTriggerData()
do Commit-Transaction
//commitTransaction()
LET $Command = 'sleep 15'  !After interface run wait 15 seconds and do it again  !sree**rehost !ZHR_MOD_ZHRI100A_sleep
//command = "sleep 15"
Call System Using $Command #status Wait            !sree**rehost     !ZHR_MOD_ZHRI100A_sleep

do Get-Trigger-Data-NonEmp  !calls the procesdure for POIs ad multiple EIDs
//getTriggerDataNonEmp()
do Commit-Transaction
//commitTransaction()
LET $Command_non = 'sleep 15'  !Surya Added after the main trigger table wait for 15 secs
//commandNon = "sleep 15"
Call System Using $Command_non #status Wait

If $file_open = 'Y'                        !ZHR_MOD_ZHRI100A_sleep
//if(fileOpen) {
close 1                                   !ZHR_MOD_ZHRI100A_sleep
//close file
End-If                                     !ZHR_MOD_ZHRI100A_sleep
//}
LET $file_open = 'N'                       !ZHR_MOD_ZHRI100A_sleep
//fileOpen = false
end-while   !1=1
//} //end while(true)
LET $Command = 'mv' || ' ' || '/usr/local/barch/' || $ORACLE_SID || '/work/hrinterface.stop' || ' ' || '/usr/local/barch/' || $ORACLE_SID || '/work/hrinterface.run'  ! ALS-10/08/2008
//command = "mv" + " " + "/usr/local/barch/" + oracleSid + "/work/hrinterface.stop" + " " + "/usr/local/barch/" + oracleSid + "/work/hrinterface.run"

Call System Using $Command #status Wait    !ZHR_MOD_ZHRI100A_sleep       

End-Procedure Process-Main

!----------------------------------------------------------------------!
!   Procedure:    Get-Variable                                         !
!   Description:  This new procedure will get the variables            !
!                 from ZPTT_VARIABLES                                  !
!----------------------------------------------------------------------! 
//variableNeeded
//return PS_ZPTT_VARIABLES.ZPTF_VARIABLE_VAL

Begin-Procedure Get-Variable        

Begin-Select
VAR.ZPTF_VARIABLE_VAL
   Move &VAR.ZPTF_VARIABLE_VAL to $PSZPTT_VARIABLE_VAL
from  PS_ZPTT_VARIABLES VAR
where VAR.PRCSNAME = 'ZHRI100A'
and   VAR.DBNAME = (Select dbname
		      from PSDBOWNER)
and   VAR.VARIABLE_NAME = $Variable_Needed
End-Select
//return 
//	SELECT ZPTF_VARIABLE_VAL 
//	FROM PS_ZPTT_VARIABLES 
//	WHERE PRCSNAME = 'ZHRI100A'
//	AND DBNAME = (SELECT dbname FROM PSDBOWNER)
//	AND VARIABLE_NAME = :variableNeeded

End-Procedure Get-Variable

!----------------------------------------------------------------------! 
!   Procedure:    FTP-File                                             !
!   Description:  This procedure will transfer the file from UNIX      !
!                 to NT server                                         !
!----------------------------------------------------------------------!

Begin-Procedure FTP-File
If #status != 0
//do nothing
End-If
End-Procedure

!----------------------------------------------------------------------!
!   Procedure:    Check-Interface-Runfile                              !
!   Description:  This procedure will check the existance run file     !
!----------------------------------------------------------------------!
//oracleSid
//return runFlag

Begin-Procedure Check-interface-runfile
LET $RUN_FILEPATH = '/usr/local/barch/' || $ORACLE_SID || '/work/hrinterface.run'
//runFilePath = "/usr/local/barch/" + oracleSid + "/work/hrinterface.run"
LET #file_exists = exists($RUN_FILEPATH)
//fileExists = File.exists(runFilePath)
If #file_exists = 0
//if(fileExists) {
   LET #run_flag = 1
   //runFlag = true
Else
//else {
   LET #run_flag = 0
   //runFlag = false
End-If
//} //end if(fileExists)
End-Procedure Check-interface-runfile

!----------------------------------------------------------------------
! ERAC
! Procedure:  Get-Trigger-Data
! Desc:  This procedure will get the trigger data that needs to be interfaced
!----------------------------------------------------------------------
//asOfToday
//sysDate
//adActionCode
//adLegOprId
//fileOpen

Begin-Procedure Get-Trigger-Data

LET $CompletionStatus = 'P'   !Initialize the CompletionStatus field
//completionStatus = "P"
Begin-Select loops=150
//wrkSequence = PS_ZHRT_INTTRIGGER.SEQ_NBR
//auditOprId = PS_ZHRT_INTTRIGGER.OPRID.trim()
//psEmplId = PS_ZHRT_INTTRIGGER.EMPLID.trim()
//wrkEmplId1 = psEmplId
//wrkEmplId2 = edit(wrkEmplId1,'099999999') //make 9 characters long, left padded with "0"
//psEffDt = to_char(PS_ZHRT_INTTRIGGER.EFFDT, 'YYYY-MM-DD')
//psEffSeq = PS_ZHRT_INTTRIGGER.EFFSEQ
//wrkProcess = PS_ZHRT_INTTRIGGER.PROC_NAME.trim()

RZ.SEQ_NBR
    MOVE &RZ.SEQ_NBR TO #WrkSequence
RZ.OPRID
    LET $AuditOprId = Ltrim(Rtrim(&RZ.OPRID,' '),' ')
RZ.EMPLID
    LET $PSEmplId = Ltrim(Rtrim(&RZ.EMPLID,' '),' ')
    Move $PSEmplId to #Wrk_EmplID1
    LET $Wrk_EmplId2 =  edit(#Wrk_EmplID1,'099999999')
to_char(RZ.EFFDT, 'YYYY-MM-DD') &RZEFFDT
    LET $PSEffDt = &RZEFFDT
RZ.EFFSEQ
    Move &RZ.EFFSEQ to #PSEffSeq
RZ.PROC_NAME
    LET $WrkProcess = ltrim(rtrim(&RZ.PROC_NAME,' '),' ')           !Remove leading and trailing blanks
If $file_open = 'N'
//if(fileOpen) { }
End-If

Do Check-If-Contractor
//found = checkIfContractor()
LET $PoiFlag = 'N'
//poiFliag = false

If $Found = 'N'     !Not a contractor
	and  $PSEmplId <> ''    ! not a blank emplid   ZHR_MOD_ZHRI100A_110A
//if(isContractor == false && psEmplId != null && !psEmplId.isEmpty() {
!CQ 103011 Added a check for 'ZHRI102A' - to see if corresponding row on JOB 
	if $WrkProcess = 'ZHRI102A'
	//if("ZHRI102A".isEqualIgnoreCase(wrkProcess)) {
		Do Check-If-Correct102A           
		if $OK-to-process = 'Y'
		//if(checkIfCorrect102A == true) {
			Do Call-Programs
		else
			LET $CompletionStatus = 'C'
			Do Update-Trigger-Row
		end-if
	else
		Do Call-Programs
	end-if
Else
	If $Found = 'Y'
    	LET $CompletionStatus = 'C'
  	End-if
	IF  $PSEmplId = ''             !ZHR_MOD_ZHRI100A_110A
		LET $CompletionStatus = 'E'
	End-if
End-If    !$Found = 'N'
If $CompletionStatus <> 'P'
	If ($ADAction_Code <> '') AND ($ADLegOprId <> '')
   		!DO Check-EffDt-Transaction
		IF $AdFound = 'N'
  			!Do Build-Active-Dir-Output-File
    	End-If
	End-If
	Do Update-Trigger-Row
End-If    !$CompletionStatus <> 'P'

from PS_ZHRT_INTTRIGGER RZ,PS_JOB JB
where RZ.TASK_FLAG = 'P'
  	and (RZ.EFFDT <= $AsOfToday 
  	or RZ.PROC_NAME='ZHRI101A' 
  	or  RZ.PROC_NAME='ZHRI106A')
  	and (case when proc_name in ('ZHRI101A', 'ZHRI106A') then SEQ_NBR else SEQ_NBR*10 END) = 
		(select min(case when proc_name in ('ZHRI101A', 'ZHRI106A') then SEQ_NBR else SEQ_NBR*10 END)  
     		from  PS_ZHRT_INTTRIGGER RZ2
       		where RZ2.EMPLID = RZ.EMPLID
        		and RZ2.TASK_FLAG = 'P'
               	and (RZ2.EFFDT <= SYSDATE 
             	or RZ2.PROC_NAME='ZHRI101A' 
               	or RZ2.PROC_NAME='ZHRI106A'))
  	and JB.EMPLID = RZ.EMPLID
  	and JB.EFFDT = 
  		(SELECT MAX(JB2.EFFDT) FROM  PS_JOB JB2
      		WHERE  JB2.EMPLID = JB.EMPLID
          		AND  JB2.EMPL_RCD = JB.EMPL_RCD)
	and JB.EFFSEQ = 
		(SELECT MAX(JB3.EFFSEQ) FROM PS_JOB JB3
      		WHERE JB3.EMPLID = JB.EMPLID
       			AND  JB3.EMPL_RCD = JB.EMPL_RCD
           		AND  JB3.EFFDT = JB.EFFDT)
End-Select

End-Procedure Get-Trigger-Data

!----------------------------------------------------------------------
! ERAC
! Procedure:  Call-Programs
! Desc:  Subroutine will call appropriate programs
!----------------------------------------------------------------------
//wrkProcess
//auditOprId
//psEmplId
//psEffDt
//psEffSeq
//wrkProcess
//wrkSequence

Begin-Procedure Call-Programs

do Intialize-AD-WrkFields
//intializeAdWrkFields()

evaluate $WrkProcess
//switch wrkProcess

    when = 'ZHRI101A'
        !Move fields to be used in the called SQC
        LET $Wrk_Oprid = $AuditOprId
        LET $Wrk_EmplId = $PSEmplId
        LET $Wrk_Effdt = $PSEffDt
        move #PSEffseq to #Wrk_Effseq
        LET $Wrk_Process_Name = $WrkProcess
        LET $Wrk_Inf_ = ' '
        LET $ADAction_Code = 'H'
        LET $ADLegOprId = ''
        Do HR01-Process-Main    !ZHRI101A.SQC
        break
    //case "ZHRI101A"
    //	wrkOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffDt = psEffDt
    //	wrkEffSeq = psEffSeq
    //	wrkProcessName = wrkProcess
    //	wrkInf_ = " "
    //	adActionCode = "H"
    //	adLegOprId = ""
    //	hr01ProcessMain()
        

    when = 'ZHRI102A'
        !Move fields to be used in the called SQC
        Move #Wrk_Sequence to #WrkSeqNbr
        LET $PSAuditOperId = $AuditOprId
        LET $PSDateIn = $PSEffDt
        LET $Wrk_EmplId = $PSEmplId
        LET $ADAction_Code = 'T'
        LET $ADLegOprId = ''
        Do HR02-Process-Main    !ZHRI102A.SQC
        break
    //case "ZHRI102A"
    //	wrkrkSeqNbr = wrkSequence
    //	psAuditOperId = auditOprId
    //	psDateIn = psEffDt
    //	wrkEmplId = psEmplId
    //	adActionCode = "T"
    //	adLegOprId = ""
    //	hr02ProcessMain()
 
    when = 'ZHRI104A'
        !Move fields to be used in the called SQC
        LET $PSUserOprid = $AuditOprId
        LET $Wrk_EmplId = $PSEmplId
        Move #PSEffseq to #WrkEffseq
        LET $ADAction_Code = 'C'
        LET $ADLegOprId = ''
        Do HR04-Process-Main    !ZHRI104A.SQC
        break
    //case "ZHRI104A"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	hr04ProcessMain()

    when = 'ZHRI105A'
        !Move fields to be used in the called SQC
        LET $PSemp = $AuditOprId
        LET $Wrk_EmplId = $PSEmplId
        LET $ADAction_Code = 'C'
        LET $ADLegOprId = ''
        LET $Wrk_ADCountryCdBuild = 'Y'
        Do HR05-Process-Main    !ZHRI105A.SQC
        break
    //case "ZHRI105A"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	hr05ProcessMain()

    when = 'ZHRI106A'
        !Move fields to be used in the called SQC
        LET $Wrk_Oprid = $AuditOprId
        LET $Wrk_EmplId = $PSEmplId
        LET $Wrk_Effdt = $PSEffDt
        move #PSEffseq to #Wrk_Effseq
        LET $Wrk_Process_Name = $WrkProcess
        LET $ADAction_Code = 'R'
        Do HR01-Process-Main       !ZHRI101A.SQC
        break
    //case "ZHRI106A"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	hr01ProcessMain()

    when = 'ZHRI107A'
        LET $Wrk_EmplId = $PSEmplId                              !sree**10/04/01
        LET $ADAction_Code = ''
        LET $ADLegOprId = ''
        Do HR07-Process-Main
        break
    //case "ZHRI107A"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	hr07ProcessMain()

    when = 'ZHRI109A'
        !Move fields to be used in the called SQC
        LET $PSUserOprid = $AuditOprId
        LET $Wrk_EmplId = $PSEmplId                              !sree**10/04/01
        Move #PSEffseq to #WrkEffseq
        LET $ADAction_Code = 'C'
        LET $ADLegOprId = ''
        Do HR09-Process-Main        !ZHRI100A.SQC
        break
    //case "ZHRI109A"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	hr09ProcessMain()

    when = 'ZHRI101D'     !Row deleted on hire
        LET $ErrorProgramParm = 'HRZ101A'
        LET $ErrorMessageParm = 'A row was deleted on the hire process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI101D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI102D'     !Row deleted on term
        LET $ErrorProgramParm = 'HRZ102A'
        LET $ErrorMessageParm = 'A row was deleted on the termination process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI102D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI104D'     !Row deleted on jobstatus change
        LET $ErrorProgramParm = 'HRZ104A'
        LET $ErrorMessageParm = 'A row was deleted on the job-profile process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI104D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI105D'     !Row deleted on demographis change
        LET $ErrorProgramParm = 'HRZ105A'
        LET $ErrorMessageParm = 'A row was deleted on the demographics process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI105D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI106D'     !Row deleted on rehire
        LET $ErrorProgramParm = 'HRZ101A'
        LET $ErrorMessageParm = 'A row was deleted on the re-hire process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI106D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI107D'     !Row deleted on
        LET $ErrorProgramParm = 'HRZ107A'
        LET $ErrorMessageParm = 'A row was deleted on the dates process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI107D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when = 'ZHRI109D'
        LET $ErrorProgramParm = 'HRZ109A'
        LET $ErrorMessageParm = 'A row was deleted on the group transfer process'
        LET $WrkCriticalFlag = 'Y'
        Do Prepare-Error-Parms           ! JHV  09/11/02  fix Date Mask error  ZHR_PRDSPT_INTF_ERROR
        Do Call-Error-Routine
        LET $WrkCriticalFlag = 'N'
        LET $CompletionStatus = 'C'
        Do Update-Trigger-Row
    //case "ZHRI109D"
    //	psUserOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffSeq = psEffSeq
    //	adActionCode = "C"
    //	adLegOprId = ""
    //	updateTriggerRow()

    when-other
        LET $CompletionStatus = 'E'     !update to an E to prevent looping and to mark the record in error
        Do Update-Trigger-Row
        break
    //default
    //	completionStatus = "E"
    //	updateTriggerRow()

end-evaluate

End-Procedure Call-Programs

!----------------------------------------------------------------------
! ERAC
! Procedure:  Update-Trigger-Row
! Desc:  This routine update the trigger file flag switch
!----------------------------------------------------------------------
//completionStatus
//wrkSequence

Begin-Procedure Update-Trigger-Row
begin-sql
Update PS_ZHRT_INTTRIGGER
	set Task_Flag = $CompletionStatus
where SEQ_NBR = #WRKSEQUENCE
end-sql

LET $CompletionStatus = 'P'     !Reset the completion Status for next pass

End-Procedure Update-Trigger-Row

!---------------------------------Surya Added----------------------------!

!----------------------------------------------------------------------
! ERAC
! Procedure:  Get-Trigger-Data-NonEmp
! Desc:  This procedure will get the trigger data for non employees and multiple 
! EIDs that needs to be interfaced
!----------------------------------------------------------------------
//AsOfToday

//taskFlag = 'P'

Begin-Procedure Get-Trigger-Data-NonEmp

LET $NCompletionStatus = 'P'   !Initialize the CompletionStatus field

Begin-Select loops = 150
RN.SEQ_NBR
    MOVE &RN.SEQ_NBR TO #NWrkSequence
RN.OPRID
    LET $NAuditOprid = Ltrim(Rtrim(&RN.OPRID,' '),' ')
    LET $AuditOprId = Ltrim(Rtrim(&RZ.OPRID,' '),' ')
RN.EMPLID
    LET $NPSEmplid = Ltrim(Rtrim(&RN.EMPLID,' '),' ')
    Move $NPSEmplid to #NWrk_EmplID1
    LET $NWrk_EmplId2 =  edit(#NWrk_EmplID1,'099999999')
to_char(RN.EFFDT, 'YYYY-MM-DD') &RNEFFDT
    LET $NPSEffdt = &RNEFFDT
RN.EFFSEQ
    Move &RN.EFFSEQ to #NPSEffSeq
RN.PROC_NAME
    LET $NWrkProcess = ltrim(rtrim(&RN.PROC_NAME,' '),' ')           !Remove leading and trailing blanks
RN.SEQUENCE 
	move &RN.SEQUENCE TO #indexNum 
	DO Call-Programs-NonEmp  
	IF  $NPSEmplid = ''             !ZHR_MOD_ZHRI100A_110A
 		LET $NCompletionStatus = 'E'
   	End-if
   	LET $PoiFlag = 'Y'
   	If $NCompletionStatus <> 'P'
     	Do Update-Trigger-Row_NonEmp
   	End-If  
from PS_ZHRT_ALTTRIGGER RN
where RN.TASK_FLAG = 'P'
	and (RN.EFFDT <= $AsOfToday 
	or RN.PROC_NAME='ZHRI201A' 
	or RN.PROC_NAME='ZHRI206A')
	and (case when proc_name in ('ZHRI201A', 'ZHRI206A') then SEQ_NBR else SEQ_NBR*10 END) = 
   		(select min(case when proc_name in ('ZHRI201A', 'ZHRI206A') then SEQ_NBR else SEQ_NBR*10 END)  
       		from  PS_ZHRT_ALTTRIGGER RN2
         	where RN2.EMPLID = RN.EMPLID
       			AND RN2.SEQUENCE = RN.SEQUENCE
             	AND RN2.PROC_NAME = RN.PROC_NAME 
             	and RN2.TASK_FLAG = 'P'                                         
              	and (RN2.EFFDT <= SYSDATE 
              	or RN2.PROC_NAME='ZHRI201A' 
              	or RN2.PROC_NAME='ZHRI206A'))                                 
 
End-Select

End-Procedure Get-Trigger-Data-NonEmp


!----------------------------------------------------------------------
! ERAC
! Procedure:  Call-Programs-NonEmp
! Desc:  Subroutine will call appropriate programs for Non Emp
!----------------------------------------------------------------------

Begin-Procedure Call-Programs-NonEmp

evaluate $NWrkProcess
//switch wrkProcess

    when = 'ZHRI201A'
        !Move fields to be used in the called SQC
        LET $Wrk_Oprid = $NAuditOprid
        LET $Wrk_EmplId = $NPSEmplid
        LET $Wrk_Effdt = $NPSEffdt
        move #NPSEffseq to #Wrk_Effseq
        LET $Wrk_indexNum = to_char(#indexNum)
        LET $Wrk_Process_Name = $NWrkProcess
        Do HR201-Process-Main    !ZHRI201A.SQC
        break
    //case "ZHRI201A"
    //	wrkOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffDt = psEffDt
    //	wrkEffSeq = psEffSeq
    //	wrkProcessName = wrkProcess
    //	wrkInf_ = " "
    //	adActionCode = "H"
    //	adLegOprId = ""
    //	hr201ProcessMain()

    when = 'ZHRI202A'
        !Move fields to be used in the called SQC
        LET $PSAuditOperId = $NAuditOprid
        LET $PSDateIn = $NPSEffdt
        LET $Wrk_EmplId = $NPSEmplid 
        LET $Wrk_indexNum = to_char(#indexNum)                   
        Do HR202-Process-Main    !ZHRI202A.SQC
        break
    //case "ZHRI202A"
    //	wrkOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffDt = psEffDt
    //	wrkEffSeq = psEffSeq
    //	wrkProcessName = wrkProcess
    //	wrkInf_ = " "
    //	adActionCode = "H"
    //	adLegOprId = ""
    //	hr202ProcessMain()

    when = 'ZHRI205A'
        !Move fields to be used in the called SQC
        LET $PSAuditemp = $NAuditOprid
        LET $Wrk_EmplId = $NPSEmplid                              
        LET $Wrk_indexNum = to_char(#indexNum)
        LET $PSEffDt =  $NPSEffdt     
        Do HR205-Process-Main    !ZHRI105A.SQC
        break
    //case "ZHRI205A"
    //	wrkOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffDt = psEffDt
    //	wrkEffSeq = psEffSeq
    //	wrkProcessName = wrkProcess
    //	wrkInf_ = " "
    //	adActionCode = "H"
    //	adLegOprId = ""
    //	hr205ProcessMain()

    when = 'ZHRI206A'
        !Move fields to be used in the called SQC
        LET $Wrk_Oprid = $NAuditOprid
        LET $Wrk_EmplId = $NPSEmplid
        LET $Wrk_Effdt = $NPSEffdt
        move #NPSEffseq to #Wrk_Effseq
        LET $Wrk_indexNum = to_char(#indexNum)
        LET $Wrk_Process_Name = $NWrkProcess
        Do HR201-Process-Main       !ZHRI201A.SQC
        break
    //case "ZHRI206A"
    //	wrkOprId = auditOprId
    //	wrkEmplId = psEmplId
    //	wrkEffDt = psEffDt
    //	wrkEffSeq = psEffSeq
    //	wrkProcessName = wrkProcess
    //	wrkInf_ = " "
    //	adActionCode = "H"
    //	adLegOprId = ""
    //	hr201ProcessMain()

    when-other
        LET $CompletionStatus = 'E'     !update to an E to prevent looping and to mark the record in error
        Do Update-Trigger-Row_NonEmp  !Surya Added 
        break
    //default
    //	completionStatus = "E"
    //	updateTriggerRowNonEmp()

end-evaluate

End-Procedure Call-Programs-NonEmp



!----------------------------------------------------------------------
! ERAC
! Procedure:  Update-Trigger-Row_NonEmp
! Desc:  This routine update the trigger file flag switch for Non Emp
!----------------------------------------------------------------------
//ncompletionStatus
//nwrkSequence

Begin-Procedure Update-Trigger-Row_NonEmp

begin-sql
Update PS_ZHRT_ALTTRIGGER
	set Task_Flag = $NCompletionStatus
	where SEQ_NBR = #NWrkSequence
end-sql
LET $NCompletionStatus = 'P'     !Reset the completion Status for next pass

End-Procedure Update-Trigger-Row_NonEmp

!---------------------------------Surya Added End-------------------------!

!----------------------------------------------------------------------
! ERAC
! Procedure:  Call-System
! Desc:  Executes a command line statement stored in the $Command Variable
!----------------------------------------------------------------------
//command
//rexecScript
//rmtSvr
//poiFlag

Begin-Procedure Call-System

LET #CommandLength = length($Command)             !Get the length of the command
LET #SubstrStartPos = 1    !Initiate the starting positions to show the first 100 positions

while #SubstrStartPos <= #CommandLength
	LET $ShowCommand = substr($Command,#SubstrStartPos,100)   !Substring 100 positions to show
    LET #SubstrStartPos = #SubstrStartPos + 100    !Increase the starting position by 100
end-while   !#SubstrStartPos <= #CommandLength
LET $Command = $RexecScript || ' ' || $Command || ' ' || $RMTSVR  !changed for v8.3
Do GET-CURRENT-DATETIME  !Gets the current date and time using curdttim.sqc
Call System Using $Command #Status Wait      !Execute the command that was built on the command waiting until completion
If #status != 0
	!error
  	LET $ErrorProgramParm = 'ZHRI100A'
  	LET $ErrorMessageParm = ' '
  	LET $ErrorMessageParm = 'Error executing Call System command, contact HR-PeopleSoft Oncall'
  	LET $WrkCriticalFlag  = 'Y'
  	Do Prepare-Error-Parms
  	if $PoiFlag = 'N'
		Do Call-Error-Routine
  	else
    	Do Call-Error-Routine-NonEmp
  	end-if
  	LET $WrkCriticalFlag  = 'N'
End-If

End-Procedure Call-System


!----------------------------------------------------------------------
! ERAC
! Procedure:  Prepare-Error-Parms
! Desc:  Makes sure that the parms are the correct length for the error
!        routine RPG program to recieve them
!----------------------------------------------------------------------
//asOfToday
//out
//auditOprId

Begin-Procedure Prepare-Error-Parms

!Prepare the date and time parms
Do Get-Current-DateTime                                 !Get the current date and time
LET $AddDateErrorParm = datetostr(strtodate($AsOfToday,'DD-MON-YYYY'),'YYYYMMDD')
LET $AddTimeErrorParm = substr($Out,10,2)    ||    substr($Out,13,2)    ||    substr($Out,16,2)
LET $OprIdErrorParm   = Substr($AuditOprId,2,5)

End-Procedure Prepare-Error-Parms

!----------------------------------------------------------------------
! ERAC
! Procedure:  Call-Error-Routine
! Desc:  Builds the command and calls the error routine
!----------------------------------------------------------------------
//errorMessageParm
//library
//errorProgramParm
//wrkEmplId2
//errorMessageParm
//wrkCriticalFlag
//addDateErrorParm
//addTimeErrorParm
//oprIdErrorParm

Begin-Procedure Call-Error-Routine
!Make Sure that the ErrorMessageParm is always 75 Characters long
LET $ErrorMessageParm = Substr($ErrorMessageParm,1,75)  !Make sure not more than 75 long
LET $ErrorMessageParm = Rpad($ErrorMessageParm,75,' ')  !Make sure not less than 75 long
LET $Command =   '"CALL '       ||
                 $Library                     ||
                 '/HRZ110A '                  ||
                 'PARM('''                    ||
                 $ErrorProgramParm            ||
                 ''' '''                      ||
                 $Wrk_EmplId2                 ||
                 ''' '''                      ||
                 ' '                          ||
                 ''' '''                      ||
                 $ErrorMessageParm            ||
                 ''' '''                      ||
                 $WrkCriticalFlag             ||
                 ''' '''                      ||
                 $AddDateErrorParm            ||
                 ''' '''                      ||
                 $AddTimeErrorParm            ||
                 ''' '''                      ||
                 $OprIdErrorParm              ||
                 ''' '''                      ||
                 'Y'                          ||
                 ''')" '
Do Call-System                                              
End-Procedure Call-Error-Routine

!----------------------------------------------------------------------
! ERAC
! Procedure:  Call-Error-Routine-NonEmp
! Desc:  Builds the command and calls the error routine
!----------------------------------------------------------------------
//errorMessageParm
//library
//errorProgramParm
//nwrkEmplId2
//wrkIndexNum
//errorMessageParm
//wrkCriticalFlag
//addDateErrorParm
//addTimeErrorParm
//oprIdErrorParm

Begin-Procedure Call-Error-Routine-NonEmp
!Make Sure that the ErrorMessageParm is always 75 Characters long
LET $ErrorMessageParm = Substr($ErrorMessageParm,1,75)  !Make sure not more than 75 long
LET $ErrorMessageParm = Rpad($ErrorMessageParm,75,' ')  !Make sure not less than 75 long
LET $Command =   '"CALL '       ||
                 $Library                     ||
                 '/HRZ210A '                  ||
                 'PARM('''                    ||
                 $ErrorProgramParm            ||
                 ''' '''                      ||
                 $NWrk_EmplId2                ||
                 ''' '''                      ||
                 $Wrk_indexNum                ||
                 ''' '''                      ||
                 ' '                          ||
                 ''' '''                      ||
                 $ErrorMessageParm            ||
                 ''' '''                      ||
                 $WrkCriticalFlag             ||
                 ''' '''                      ||
                 $AddDateErrorParm            ||
                 ''' '''                      ||
                 $AddTimeErrorParm            ||
                 ''' '''                      ||
                 $OprIdErrorParm              ||
                 ''' '''                      ||
                 'Y'                          ||
                 ''')" '
Do Call-System                                              
End-Procedure Call-Error-Routine-NonEmp

!----------------------------------------------------------------------
! ERAC
! Procedure:  Check-If-Contractor
! Desc:  Checks to see if the employee is a contractor
!----------------------------------------------------------------------
//psEmplId
//emplClass = "R"
//asOfToday
//return found

Begin-Procedure Check-If-Contractor
LET $Found = 'N'
Begin-Select
'X'
LET $Found = 'Y'
From PS_JOB RJ
where RJ.EMPLID = $PSEmplId
	and RJ.EMPL_CLASS = 'R'
	and RJ.EFFDT = 
		(SELECT MAX(EFFDT) FROM  PS_JOB RJ2
     		WHERE  RJ2.EMPLID = RJ.EMPLID
       			AND  RJ2.EMPL_RCD = RJ.EMPL_RCD
            	AND  RJ2.EFFDT <= $AsOfToday)
				and RJ.EFFSEQ = 
					(SELECT MAX(EFFSEQ) FROM PS_JOB RJ3
          				WHERE RJ3.EMPLID = RJ.EMPLID
                     		AND  RJ3.EMPL_RCD = RJ.EMPL_RCD
                      		AND RJ3.EFFDT = RJ.EFFDT)
End-Select
End-Procedure Check-If-Contractor

!----------------------------------------------------------------------
! ERAC
! Procedure:  Check-If-Correct102A
! Desc:  Checks to see if 102A process has JOB row
!----------------------------------------------------------------------
//wrkProcess
//psEffDt
//psEmplId
//return okToProcess

Begin-Procedure Check-If-Correct102A
LET $OK-to-process = 'N'
if $WrkProcess = 'ZHRI102A'
	do dtu-add-days($PSEffDt,1,$dt102)
end-if
Begin-Select
'XX'
LET $OK-to-process = 'Y'
From PS_JOB RD
where RD.EMPLID = $PSEmplId
	and to_char(RD.EFFDT, 'YYYY-MM-DD') = $dt102
End-Select
End-Procedure Check-If-Correct102A

!----------------------------------------------------------------------
! ERAC
! Procedure:  Build-Group-Where-Clause
! Desc:  This routine will build the where clause that will select the
!        correct Run-ID to use.
!----------------------------------------------------------------------
//whereClause
//alias
//selectGroup
//return whereClause

Begin-Procedure Build-Group-Where-Clause
LET $WhereClause = ltrim(rtrim($WhereClause,' '),' ')  !Remove leading and trailing blanks
if ($WhereClause = '')  !If the where clause is empty
	LET $WhereClause = 'Where ((' || $Alias || '.HMRGP = ' || '''' || $SelectGroup || ''''  !Add the first statement to the where clause
else  !The where clause is not empty
    LET $WhereClause = $WhereClause || ' or ' || $Alias || '.HMRGP = ' || '''' ||$SelectGroup || ''''!append a condition to the where clause
end-if      !$WhereClause = ''
End-Procedure   Build-Group-Where-Clause

!----------------------------------------------------------------------
! ERAC
! Procedure:  Build-Emplid-Where-Clause
! Desc:  Builds a where clause based on an employee id entered by the user
!----------------------------------------------------------------------
Begin-Procedure Build-Emplid-Where-Clause
LET $WhereClause = 'Where ((' || $Alias || '.HMREMP = ' || '''' || $Run-Id || ''''  !Create the where clause
End-Procedure Build-Emplid-Where-Clause

!----------------------------------------------------------------------
! ERAC
! Procedure:  Get-Oprid
! Desc:  This routine gets the operator id from the operator definition
!        table
!----------------------------------------------------------------------
//wrkEmplId
//indexNum
//poiFlag
//return psOprId

Begin-Procedure Get-Oprid
LET $Found = 'N'
LET $PSOprId = ''
if (#indexNum = 0 and $PoiFlag = 'Y')  or $PoiFlag = 'N'
	do get-LegID-for-seq0
else 
  	if (#indexNum <> 0 and $PoiFlag = 'Y')
    	do get-LegID-for-seqnum
  	end-if
end-if
!If an oprid does not exist for the employee, create one
If ($Found = 'N')
	do Get-Legacy-OprId
	LET $PSOprId = $LegEmplId
End-if    !$Found = 'N'
End-Procedure Get-Oprid

!----------------------------------------------------------------------
! ERAC
! Procedure:  get-LegID-for-seq0
! Desc:  This routine gets the Legacy ID from Employee CREF Table for 
! Primary EIDs
!----------------------------------------------------------------------
//PS_ZHRR_MULTPL_EID.findLegEmplIdByEmplId()
//wrkEmplId
//return psOprId

Begin-Procedure get-LegID-for-seq0
begin-select
RPOD.ZHRF_LEG_EMPL_ID
LET $PSOprId = &RPOD.ZHRF_LEG_EMPL_ID
LET $Found = 'Y'
from PS_ZHRT_EMPID_CREF RPOD
where RPOD.Emplid = $Wrk_EmplId         
end-select
End-Procedure get-LegID-for-seq0

!----------------------------------------------------------------------
! ERAC
! Procedure:  get-LegID-for-seqnum
! Desc:  This routine gets the Legacy ID from Alternate EID Table
!----------------------------------------------------------------------
//PS_ZHRR_MULTPL_EID.findLegEmplIdByEmplIdAndSequence()
//wrkEmplId
//indexNum
//return psOprId

Begin-Procedure get-LegID-for-seqnum
!check if the multiple EID table has the EID!
begin-select
MULT.ZHRF_LEG_EMPL_ID
LET $PSOprId = Ltrim(Rtrim(&MULT.ZHRF_LEG_EMPL_ID,' '),' ')
if $PSOprId <> ''
	LET $Found = 'Y'
end-if
from PS_ZHRR_MULTPL_EID MULT
where MULT.Emplid = $Wrk_EmplId  
	and MULT.Sequence = #indexNum      
end-select
End-Procedure get-LegID-for-seqnum

!----------------------------------------------------------------------
! ERAC
! Procedure:  Get-Legacy-OprId
! Desc:  Gets the new oprid from the legacy system
!----------------------------------------------------------------------
//wrkEmplId
//poiFlag
//indexNum

Begin-Procedure Get-Legacy-OprId
LET $LegEmplId = ''
Move $Wrk_EmplId to #wrk_emplid
if $PoiFlag = 'N'
	move 0 to #indexNum
end-if
Begin-Select
CHR36.H36NAM
CHR36.H36EMP
CHR36.H36EM#
//HR036P.findByH36em#AndH36Inx()
!This IF statement and OR part of Select is a workaround to some problem in v8
!(gateway and new version of SQR).  The Select was hanging if it couldn't find a
!match in HR036P, so the Select assures that the Select always finds a match.
LET #WRK_CHR36_H36EM_NUM = &CHR36.H36EM#
IF #WRK_CHR36_H36EM_NUM = #wrk_emplid
	LET $LegEmpName = &CHR36.H36NAM
	Do Format-Employee-Name
    LET $LegEmplId = &CHR36.H36EMP
    LET $LegEmplId = substr($LegEmplId,1,5)
    If (#indexNum = 0 and $PoiFlag = 'Y')  or $PoiFlag = 'N'
      	DO Insert-Oprid
    else
      	if (#indexNum <> 0 and $PoiFlag = 'Y')
        	DO Update-OprId
      	end-if
    end-if  
End-if    !#WRK_CHR36_H36EM_NUM = #wrk_emplid

from HR036P CHR36
where CHR36.H36EM# = #wrk_emplid
and CHR36.H36INX = #indexNum 
UNION
SELECT
' ',
' ' ,
9999999999
FROM DUAL
End-Select
End-Procedure Get-Legacy-OprId

!----------------------------------------------------------------------
! ERAC
! Procedure:  Insert-Oprid
! Desc:  This routine will insert a row into the PS_ZHRT_EMPID_CREF table for the
!        employee if the employee has a record in HR006P
!----------------------------------------------------------------------
//wrkEmplId
//legEmplId

Begin-Procedure Insert-Oprid
LET $Insert-Error-Flag = 'N'
//insertErrorFlag = false
!Add to the PS_ZHRT_EMPID_CREF table
Begin-SQL  On-Error= Insert-Error
INSERT INTO PS_ZHRT_EMPID_CREF (EMPLID, ZHRF_LEG_EMPL_ID)
VALUES ($Wrk_EmplId, $LegEmplId)
End-Sql
End-Procedure Insert-Oprid

!Surya Added
!----------------------------------------------------------------------
! ERAC
! Procedure:  Update-OprId
! Desc:  This routine will UPDATE table PS_ZHRR_MULTPL_EID for the
!        Non Employees and Multiple EIDs if the employee has a record in HR036P
!----------------------------------------------------------------------
//legEmplId
//wrkEmplId
//indexNum

Begin-Procedure Update-OprId
LET $Update-Error-Flag = 'N'
//updateErrorFlag = false
!Update the PS_ZHRR_MULTPL_EID table for Multiple EIDs 
Begin-SQL  On-Error = Update-Error
UPDATE PS_ZHRR_MULTPL_EID
	SET ZHRF_LEG_EMPL_ID = $LegEmplId
	WHERE EMPLID = $Wrk_EmplId
		AND SEQUENCE = #indexNum
End-Sql
End-Procedure Update-OprId

!----------------------------------------------------------------------
! ERAC
! Procedure:  Insert-Error
! Desc:  This is an error routine to keep the program from abending when
!        an insert fails
!----------------------------------------------------------------------
//sqlError

Begin-Procedure Insert-Error
LET $ErrorMessageParm = $Sql-Error
Do Call-Error-Routine
LET $Insert-Error-Flag = 'Y'
//insertErrorFlag = true
End-Procedure Insert-Error

!Surya Added
!----------------------------------------------------------------------
! ERAC
! Procedure:  Update-Error
! Desc:  This is an error routine to keep the program from abending when
!        an insert fails
!----------------------------------------------------------------------
//sqlError

Begin-Procedure Update-Error
LET $ErrorMessageParm = $Sql-Error
Do Call-Error-Routine
LET $Update-Error-Flag = 'Y'
//updateErrorFlag = true
End-Procedure Update-Error

!----------------------------------------------------------------------
! ERAC
! Procedure:  Format-Employee-Name
! Desc:  This routine will change the format of the employee's name
! from Last*First MI* (legacy system) to Last, First MI (PeopleSoft Format)
!----------------------------------------------------------------------
//legEmpName
//return psEmpName = 

Begin-Procedure Format-Employee-Name
!Break apart the legacy system name field at the *
Unstring $LegEmpName by '*' into $PSEmp_Last_Name_Search $PSEmp_First_Name_Search $dummy   ! dummy is for the ending *
!Concatenate the Last name and the first name (separated by a comma(,) that were retrieved from the legacy system, and
!Unstringed above, into a work variable ($work_a) that will be used as input by the Convert Case routine
LET $_work_a = $PSEmp_Last_Name_Search || ',' || $PSEmp_First_Name_Search
!Execute a routine that will change the case of the $work_a variable to mixed case and return the result
!in another variable $New
DO M800-Convert-Case   !ZCvtCaseM.sqc
!Move the result from the convert-case routine to the PeopleSoft Employee Name field that will be inserted
LET $PSEmpName = $_New

End-Procedure  Format-Employee-Name

!----------------------------------------------------------------------
! ERAC
! Procedure:  Check-EffDt-Transaction
!----------------------------------------------------------------------
//wrkProcess
//psEffDt
//psEmplId
//wrkAdEffDt
//return adFound = 

Begin-Procedure Check-EffDt-Transaction

LET $WrkADEffDt = ''
IF $WrkProcess = 'ZHRI102A'
	DO dtu-add-days($PSEffDt,1,$WrkADEffDt)
ELSE
  	LET $WrkADEffDt = $PSEffDt
END-IF
LET $AdFound = 'N'
BEGIN-SELECT
'XA'
LET $AdFound = 'Y'
FROM  PS_JOB AD01
WHERE AD01.EMPLID = $PSEmplId
	AND to_char(AD01.EFFDT,'YYYY-MM-DD') > $WrkADEffDt
END-SELECT

!-----------------------------!

BEGIN-SELECT
'XB'
LET $AdFound = 'Y'
FROM  PS_PERS_DATA_EFFDT AD02
WHERE AD02.EMPLID = $PSEmplId
	AND  to_char(AD02.EFFDT,'YYYY-MM-DD') > $Wrk_ADEffDt
END-SELECT

End-Procedure Check-EffDt-Transaction

!----------------------------------------------------------------------
! ERAC
! Procedure:  Build-Active-Dir-Output-File
!----------------------------------------------------------------------

Begin-Procedure Build-Active-Dir-Output-File

LET $Wrkcreatefile = 'Y'
If $Wrk_AD_JobDataBuild = 'N'
   do AD-Get-Job-Data
End-If
do AD-Get-Job-Description
do AD-Get-EmplStatus-Description
If $Wrk_AD_PersdataEffdtBuild = 'N'
 	do AD-Get-Pers-Data-EffDt
End-If
If $Wrk_AD_Getbusinessphone = 'N'
 	do AD-Get-Business-Phone
End-If
If $Wrk_AD_PersDataBuild = 'N'
 	do AD-Get-Personal-Data
End-If
If $Wrk_AD_CountryCdBuild = 'N'
 	do AD-Get-Country-Code
End-If
do AD-Get-Employee-Fax
do AD-Get-Namesuffix
do AD-Get-JobStart-Date
do AD-Get-Employment-Data
If $ADSupervisorID <> ''
	do AD-Get-LegSuperviorID
End-If
If $Wrk_AD_NamesBuild = 'N'
 	do AD-Get-Names
End-If
LET $ADEmplid = $PSEmplId
LET $ADFirstName = $ADPSFirstName || ' ' || $ADPSMiddleName       !changed for v8.3
LET $ADLastName = $ADPSLastName
LET $ADLocation = $PSLocation
LET $ADJobCd  = $PSJobCode
LET $ADJobDescr = $PSJobDescription
LET $ADEmplStatus = $PSEmplStatus
If $PSRehireDt <> ''
	LET $ADHireDt = $PSRehiredt
else
	LET $ADHireDt = $PSHiredt
End-If
If ($PSAction = 'REH') and ($PSAction_Reason = 'REH') and ($WrkProcess = 'ZHRI102A')
	LET $ADAction_Code = 'R'
End-If
LET $ADCountry = $PSLoc_Country
LET $ADFullPartTime = $PSFullPartTime
LET $ADEmplClass = $PSEmplClass
LET $ADDeptID  = $PSDeptId
LET $ADBusinessPhone = $PSBusiness_Phone
LET $ADLangCd = $PSLangCd
LET $ADPrfName = $PSPrfName
do Write-Active-Dir-Output-File

End-Procedure Build-Active-Dir-Output-File

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Job-Data
! Desc:  Gets the Job data from the job table.
!----------------------------------------------------------------------
//PS_JOB.findAdJobDataByEmplIdAndEffDt()
//wrkEmplId
//psEffDt

Begin-Procedure AD-Get-Job-Data

Begin-Select
AD.LOCATION
    LET $PSLocation = ltrim(rtrim(&AD.LOCATION,' '),' ')
AD.FULL_PART_TIME
    LET $PSFullPartTime = ltrim(rtrim(&AD.FULL_PART_TIME,' '),' ')
AD.EMPL_CLASS
    LET $PSEmplClass = ltrim(rtrim(&AD.EMPL_CLASS,' '),' ')
AD.EMPL_STATUS
    LET $PSEmplStatus = ltrim(rtrim(&AD.EMPL_STATUS,' '),' ')
AD.DEPTID
    LET $PSDeptid = ltrim(rtrim(&AD.DEPTID,' '),' ')
AD.JOBCODE
    LET $PSJobCode = ltrim(rtrim(&AD.JOBCODE,' '),' ')
from PS_JOB AD
where AD.EMPLID = $Wrk_EmplId
	and AD.EFFDT = 
		(SELECT MAX(EFFDT) FROM  PS_JOB AD1
      		WHERE  AD1.EMPLID = AD.EMPLID
          		AND  AD1.EMPL_RCD = AD.EMPL_RCD   !changed for v8.3
              	AND  to_char(AD1.EFFDT,'YYYY-MM-DD') <= $PSEffDt)
  				and AD.EFFSEQ = 
  					(SELECT MAX(EFFSEQ) FROM PS_JOB AD2
                    	WHERE AD2.EMPLID = AD.EMPLID
                      	AND AD2.EMPL_RCD = AD.EMPL_RCD  !changed for v8.3
                      	AND AD2.EFFDT = AD.EFFDT)
End-Select
End-Procedure AD-Get-Job-Data

!----------------------------------------------------------------------
! ERAC
! Procedure: AD-Get-Job-Description
! Desc:  This routine will get the Job description for Active Directory File Build
!----------------------------------------------------------------------
//PS_JOBCODE_TBL.findJobDescriptionByJobcode()
//psJobcode
//psJobDescription = PS_JOBCODE_TBL.DESCR

Begin-Procedure AD-Get-Job-Description

LET $PSJobDescription = ''
Begin-Select
AD9.JOBCODE
AD9.DESCR
LET $PSJobDescription = ltrim(rtrim(&AD9.DESCR,' '),' ')
from PS_JOBCODE_TBL AD9
where AD9.JOBCODE = $PSJobCode
End-select

End-Procedure AD-Get-Job-Description

!----------------------------------------------------------------------
! ERAC
! Procedure: AD-Get-EmplStatus-Description
! Desc:  This routine will get the Employee Status description for Active Directory File Build
!----------------------------------------------------------------------
//PSXLATITEM.findXLatLongNameByFieldNameAndFieldValue()
//fieldName = "EMPL_STATUS"
//psEmplStatus
//SysDate
//return adEmplStatusDescr = PSXLATITEM.XLATLONGNAME

Begin-Procedure AD-Get-EmplStatus-Description

Begin-Select
AD10.XLATLONGNAME
LET $ADEmplStatusDescr = ltrim(rtrim(&AD10.XLATLONGNAME,' '),' ')
from PSXLATITEM AD10
where AD10.FIELDNAME = 'EMPL_STATUS'
	and AD10.FIELDVALUE = $PSEmplStatus
	and AD10.EFFDT = 
		(Select max(AD11.EFFDT) from PSXLATITEM AD11
     		where AD10.FIELDNAME = AD11.FIELDNAME
        		and AD10.FIELDVALUE = AD11.FIELDVALUE
               	and AD11.EFFDT <= SYSDATE)
End-Select
End-Procedure AD-Get-EmplStatus-Description

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-JobStart-Date
! Desc:  Gets the Job Start date from the job table.
!----------------------------------------------------------------------
//PS_JOB.findEffDtByEmplIdAndJobCodeAndEffDt()
//wrkEmplId
//psJobCode
//psEffDt
//return psJobStartDt = PS_JOB.EFFDT
//return adJobStartDt = PS_JOB.EFFDT

Begin-Procedure AD-Get-JobStart-Date
Begin-Select
to_char(AD4.EFFDT,'YYYY-MM-DD') &AD4.EFFDT
LET $ADJobStartYr   = substr(&AD4.EFFDT,1,4)
LET $ADJobStartMnth = substr(&AD4.EFFDT,6,2)
LET $ADJobStartDay  = substr(&AD4.EFFDT,9,2)
LET $ADJobStartDt   = $ADJobStartYr || $ADJobStartMnth || $ADJobStartDay
LET $PSJobStartDt = &AD4.EFFDT
from PS_JOB AD4
where AD4.EMPLID = $Wrk_EmplId
	and AD4.JOBCODE = $PSJobCode
  	and AD4.EFFDT = 
  		(SELECT MIN(EFFDT) FROM  PS_JOB AD5
      		WHERE  AD4.EMPLID = AD5.EMPLID
          		AND  AD4.JOBCODE = AD5.JOBCODE
             	AND  AD4.EMPL_RCD = AD5.EMPL_RCD
              	AND  to_char(AD5.EFFDT,'YYYY-MM-DD') <= $PSEffDt)
  				and AD4.EFFSEQ = 
  					(SELECT MIN(EFFSEQ) FROM PS_JOB AD2
                    	WHERE AD2.EMPLID = AD4.EMPLID
                      		AND AD2.EMPL_RCD = AD4.EMPL_RCD
                      		AND AD2.JOBCODE = AD4.JOBCODE
                      		AND AD2.EFFDT = AD4.EFFDT)
end-select

End-Procedure AD-Get-JobStart-Date

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Pers-Data-EffDt
! Desc:  This routine will get the Personal Data row for each of the
!        employee numbers entered in the trigger file.  Pers_Data_Effdt table
!        no longer has name info, so are using Names table.
!----------------------------------------------------------------------
//PS_NAMES.findByEmplIdAndEffDt()
//psEmplId
//nameType = "PRI"
//psEffDt
//adPsLastName   = RTRIM(LTRIM(&ADPDE2A.Last_Name,' '),' ')
//adPsFirstName  = RTRIM(LTRIM(&PS_NAMES.First_Name,' '),' ')
//adPsMiddleName = RTRIM(LTRIM(&PS_NAMES.Middle_Name,' '),' ')
//adPsMiddleName = SUBSTR($ADPSMiddleName,1,1)

Begin-Procedure AD-Get-Pers-Data-EffDt

begin-select
ADPDE2A.First_Name
ADPDE2A.Last_Name
ADPDE2A.Middle_Name
LET $ADPSLastName   = RTRIM(LTRIM(&ADPDE2A.Last_Name,' '),' ')
LET $ADPSFirstName  = RTRIM(LTRIM(&ADPDE2A.First_Name,' '),' ')
LET $ADPSMiddleName = RTRIM(LTRIM(&ADPDE2A.Middle_Name,' '),' ')
LET $ADPSMiddleName = SUBSTR($ADPSMiddleName,1,1)
from PS_NAMES ADPDE2A
where ADPDE2A.Emplid = $PSEmplId
	and ADPDE2A.NAME_TYPE = 'PRI'
  	and ADPDE2A.Effdt = 
  		(select max(ADPDE2B.effdt) from  PS_NAMES ADPDE2B
     		where ADPDE2B.emplid = ADPDE2A.emplid
      			and ADPDE2B.NAME_TYPE = ADPDE2A.NAME_TYPE
         		and to_char(ADPDE2B.EFFDT,'YYYY-MM-DD') <= $PSEffDt)
end-select

end-procedure AD-Get-Pers_Data-Effdt

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-NameSuffix
! Desc:  This routine will get the Name Suffix row for each of the
!        employee numbers entered in the trigger file.
!----------------------------------------------------------------------
//PS_NAMES.findNameSuffixByEmplIdAndEffDt()
//psEmplId
//nameType = "PRI"
//psEffDt
//return adNameSuffix = PS_NAMES.Name_Suffix.trim().substring(0,5)

Begin-Procedure AD-Get-NameSuffix

begin-select
ANAME.Name_Suffix
LET $ADNameSuffix  = RTRIM(LTRIM(&ANAME.Name_Suffix,' '),' ')
LET $ADNameSuffix  = SUBSTR($ADNameSuffix,1,5)
from PS_NAMES ANAME
where ANAME.Emplid = $PSEmplId
	and ANAME.NAME_TYPE = 'PRI'
  	and ANAME.Effdt = 
  		(select max(ANAME2.effdt) from  PS_NAMES ANAME2
  			where ANAME2.emplid     = ANAME.emplid
       			and   ANAME2.NAME_TYPE  = ANAME.NAME_TYPE
             	and   to_char(ANAME2.EFFDT,'YYYY-MM-DD') <= $PSEffDt)

end-select

end-procedure AD-Get-NameSuffix

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Personal-Data
! Desc:  This routine will get the Personal Data row for each of the
!        employee numbers entered in the trigger file.
!----------------------------------------------------------------------
//PS_Personal_Data.findLandCdByEmplId()
//psEmplId
//return psLangCd = PS_Personal_Data.LANG_CD.trim()

Begin-Procedure AD-Get-Personal-Data

LET $PSLangCd = ''
begin-select
ADPD.LANG_CD
LET $PSLangCd = RTRIM(LTRIM(&ADPD.LANG_CD,' '),' ')
from PS_Personal_Data ADPD
where ADPD.Emplid = $PSEmplId
end-select

end-procedure AD-Get-Personal-Data

!----------------------------------------------------------------------
! ERAC
! Procedure: AD-Get-Country-Code
! Desc:  This routine will get the Country Code for Active Directory File Build
!----------------------------------------------------------------------
//PS_LOCATION_TBL.findCountryByLocation()
//psLocation
//return psLocCountry = PS_LOCATION_TBL.COUNTRY.trim()

Begin-Procedure AD-Get-Country-Code

LET $PSLoc_Country = ''
Begin-Select
ADL2.COUNTRY
LET $PSLoc_Country = ltrim(rtrim(&ADL2.COUNTRY,' '),' ')         !Remove leading and trailing blanks
from PS_LOCATION_TBL ADL2
where ADL2.LOCATION = $PSLOCATION
end-select

End-Procedure AD-Get-Country-Code

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Business-Phone
! Desc:  This routine gets the business phone number from the Peoplesoft
!        tables.
!----------------------------------------------------------------------
//psEmplId
//phoneType = "BUSN"
//return psBusinessPhone = PS_Personal_Phone.Phone

Begin-Procedure AD-Get-Business-Phone

LET $PSBusiness_Phone = ''
begin-select
ADPP2.Phone
do Remove-Non-Letters-Numbers (&ADPP2.Phone, $PSBusiness_Phone)   !From ZRmvSpcChr.sqc
from PS_Personal_Phone ADPP2
where ADPP2.Phone_Type = 'BUSN'
	and ADPP2.Emplid = $PSEmplId
end-select

end-procedure AD-Get-Business-Phone

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Employee-Fax
! Desc:  This routine gets the business phone number from the Peoplesoft
!        tables.
!----------------------------------------------------------------------
//psEmplId
//phoneType = "FAX"
//return adEmployeeFax = PS_Personal_Phone.Phone

Begin-Procedure AD-Get-Employee-Fax

begin-select
ADPP3.Phone
do Remove-Non-Letters-Numbers (&ADPP3.Phone, $ADEmployeeFax)   !From ZRmvSpcChr.sqc
from PS_Personal_Phone ADPP3
where ADPP3.Phone_Type = 'FAX'
	and ADPP3.Emplid = $PSEmplId
end-select

end-procedure AD-Get-Employee-Fax

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-LegSuperviorID
!----------------------------------------------------------------------
//PS_ZHRT_EMPID_CREF.findLegEmplIdByEmplId()
//adSupervisorId
//return adLegSupervisorId = PS_ZHRT_EMPID_CREF.ZHRF_LEG_EMPL_ID

Begin-Procedure AD-Get-LegSuperviorID

begin-select
RPOD1.ZHRF_LEG_EMPL_ID
LET $ADLegSupervisorID = &RPOD1.ZHRF_LEG_EMPL_ID
from PS_ZHRT_EMPID_CREF RPOD1
where RPOD1.Emplid = $ADSupervisorID
end-select

end-procedure AD-Get-LegSuperviorID

!---------------------------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Employment-Data
! Desc:  This routine will get the Termination Data row for Active Directory File Build
!---------------------------------------------------------------------------------------
//PS_Employment.findByEmplId
//psEmplId
//psHireDt = PS_Employment.HIRE_DT
//psRehireDt = PS_Employment.REHIRE_DT
//psTerminationDt = PS_Employment.TERMINATION_DT
//adSupervisorId = PS_Employment.SUPERVISOR_ID

Begin-Procedure AD-Get-Employment-Data

LET $PSHiredt = ' '
LET $PSRehiredt = ' '
LET $PSTerminationdt = ' '
LET $ADSupervisorID = ' '

begin-select
to_char(ADE.HIRE_DT,'YYYY-MM-DD')       &ADEHire_Dt
  LET $PSHireYr = substr(&ADEHire_Dt,1,4)
  LET $PSHireMnth = substr(&ADEHire_Dt,6,2)
  LET $PSHireDay = substr(&ADEHire_Dt,9,2)
  LET $PSHiredt = $PSHireYr || $PSHireMnth || $PSHireDay
to_char(ADE.REHIRE_DT,'YYYY-MM-DD')       &ADERehire_Dt
  LET $PSRehireYr = substr(&ADERehire_Dt,1,4)
  LET $PSRehireMnth = substr(&ADERehire_Dt,6,2)
  LET $PSRehireDay = substr(&ADERehire_Dt,9,2)
  LET $PSRehiredt = $PSRehireYr || $PSRehireMnth || $PSRehireDay
to_char(ADE.TERMINATION_DT,'YYYY-MM-DD')  &ADETermination_Dt
  LET $PSTermYr = substr(&ADETermination_Dt,1,4)
  LET $PSTermMnth = substr(&ADETermination_Dt,6,2)
  LET $PSTermDay = substr(&ADETermination_Dt,9,2)
  LET $PSTerminationdt =  $PSTermYr || $PSTermMnth || $PSTermDay
ADE.SUPERVISOR_ID
  LET $ADSupervisorID = &ADE.SUPERVISOR_ID
from PS_Employment ADE
where ADE.Emplid = $PSEmplId
end-select

end-procedure AD-Get-Employment-Data

!----------------------------------------------------------------------
! ERAC
! Procedure:  AD-Get-Names
! Desc:  This routine gets the Preferred Name from PS_Names for Active Directory File Build
!----------------------------------------------------------------------
//PS_Names.findFirstNameByEmplId()
//psEmplId
//nameType = "PRF"
//psEffDt
//return psPrfName = PS_Names.First_Name.trim()

Begin-Procedure AD-Get-Names

LET $PSPrfName = ''
begin-select
ADN.First_Name
LET $PSPrfName = RTRIM(LTRIM(&ADN.First_Name,' '),' ')
from PS_Names ADN
where ADN.EMPLID = $PSEmplId
	AND ADN.NAME_TYPE = 'PRF'
  	AND ADN.EFFDT = 
  		(SELECT MAX(EFFDT) FROM PS_Names ADN2
      		WHERE ADN2.EMPLID   = ADN.EMPLID
        		AND ADN2.NAME_TYPE  = ADN.NAME_TYPE
         		AND to_char(ADN2.EFFDT,'YYYY-MM-DD') <= $PSEffDt)
end-select

end-procedure AD-Get-Names

!----------------------------------------------------------------------
! ERAC
! Procedure:  Write-Active-Dir-Output-File
!----------------------------------------------------------------------

Begin-Procedure Write-Active-Dir-Output-File

Write 1 from
 $ADAction_Code:1          ! Action Code (H=Hire, C=Change, T=Termination)
 '|':1
 $ADLegOprId:5             ! Legacy Employee Id
 '|':1
 $ADEmplid:11              ! Employee Id
 '|':1
 $ADFirstName:30           ! First Name
 '|':1
 $ADlastName:30            ! Last Name
 '|':1
 $ADPrfName:50             ! Preferred Name
 '|':1
 $ADNamesuffix:5           ! Name Suffix Text
 '|':1
 $ADLocation:10            ! HR Location
 '|':1
 $ADDeptID:5               ! Department ID
 '|':1
 $ADJobCd:6                ! Job Title Code
 '|':1
 $ADJobDescr:30            ! Job Title Description
 '|':1
 $ADEmplStatus:1           ! Work Status
 '|':1
 $ADEmplStatusDescr:30     ! Employee Status Description
 '|':1
 $ADHireDt:8               ! Hire Date / Rehire Date
 '|':1
 $ADTermDt:8               ! Termination Date
 '|':1
 $ADJobStartDt:8           ! Current Job Start Date
 '|':1
 $ADFullPartTime:1         ! Full/Part Time Flag (F OR P)
 '|':1
 $ADEmplClass:1            ! Employee Class
 '|':1
 $ADBusinessPhone:24       ! Business Phone Number
 '|':1
 $ADEmployeeFax:24         ! Fax Number
 '|':1
 $ADSupervisorID:11        ! Supervisor ID
 '|':1
 $ADLegSupervisorID:5      ! Leg Supervisor ID
 '|':1
 $ADCountry:3              ! Country Code
 '|':1
 $ADLangCd:3               ! Language Preference

End-Procedure Write-Active-Dir-Output-File

!----------------------------------------------------------------------
! ERAC
! Procedure:  Intialize-AD-WrkFields
!----------------------------------------------------------------------
Begin-Procedure Intialize-AD-WrkFields

LET $Wrk_AD_NamesBuild = 'N'
LET $Wrk_AD_PersDataBuild = 'N'
LET $Wrk_AD_PersDataEffdtBuild = 'N'
LET $Wrk_AD_JobDataBuild = 'N'
LET $Wrk_AD_CountryCdBuild = 'N'
LET $Wrk_AD_Getbusinessphone = 'N'
LET $ADAction_Code = ''
LET $ADLegOprId = ''
LET $ADEmplid = ''
LET $ADFirstName = ''
LET $ADLastName = ''
LET $ADLocation = ''
LET $ADJobCd  = ''
LET $ADJobDescr = ''
LET $ADEmplStatus = ''
LET $ADEmplStatusDescr = ''
LET $ADHireDt = 0
LET $ADTermDt = 0
LET $ADNamesuffix = ''
LET $ADCountry = ''
LET $ADJobStartDt = 0
LET $ADJobStartYr = 0
LET $ADJobStartMnth = 0
LET $ADJobStartDay = 0
LET $ADPrfName = ''
LET $ADFullPartTime = ''
LET $ADEmplClass = ''
LET $ADDeptID  = ''
LET $ADBusinessPhone = ''
LET $ADEmployeeFax = ''
LET $ADSupervisorID = ''
LET $ADLegSupervisorID = ''
LET $ADLangCd = ''
LET $Wrkcreatefile = 'N'
LET $WrkADEffDt = ''
End-Procedure Intialize-AD-WrkFields

!**********************************************************************
! SQC Files for called procedures
!**********************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Performs arithmetic operations on dates
#Include 'zdatetim.sqc'  !Routines for date and time formatting
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read Translate Table
#Include 'reset.sqc'     !End of Program
#INCLUDE 'stdapi.sqc'    !STANDARD PROGRAM INTERFACE
#Include 'zcvtcasem.sqc' !Routine to convert a fields case to mixed case.
#Include 'zrmvspcchr.sqc'!Routine to format text strings
#Include 'tranctrl.sqc'  !Common transaction control procedures
#Include 'zhri101a.sqc'  !Process to hire employee
#Include 'zhri102a.sqc'  !Process to terminate an employee
#Include 'zhri104a.sqc'  !Process for job status change
#Include 'zhri105a.sqc'  !Process for demographics change
#Include 'zhri109a.sqc'  !Process for group transfer
#Include 'zhri107a.sqc'  !Process for converting dates
#Include 'zhri201a.sqc'  !Process POI/Alt EMP hire/rehire 
#Include 'zhri202a.sqc'  !Process POI/Alt EMP term
#Include 'zhri205a.sqc'  !Process POI/Alt EMP changes


